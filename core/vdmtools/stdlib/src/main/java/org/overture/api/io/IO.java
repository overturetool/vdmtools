/*
 * #%~
 * The Overture Standard Library for CG code
 * %%
 * Copyright (C) 2008 - 2014 Overture
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #~%
 */








//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2009-07-26 by the VDM++ to JAVA Code Generator
// (v8.2 - Fri 29-May-2009 09:54:50)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overture.api.io;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.CGException;
import jp.co.csk.vdm.toolbox.VDM.*;
// ***** VDMTOOLS END Name=imports





public class IO {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=child KEEP=NO
  protected external_IO child = new external_IO(this);
// ***** VDMTOOLS END Name=child


// ***** VDMTOOLS START Name=vdm_init_IO KEEP=NO
  private void vdm_init_IO () throws CGException {}
// ***** VDMTOOLS END Name=vdm_init_IO


// ***** VDMTOOLS START Name=IO KEEP=NO
  public IO () throws CGException {
    vdm_init_IO();
  }
// ***** VDMTOOLS END Name=IO


// ***** VDMTOOLS START Name=writeval#1|Object KEEP=NO
  public Boolean writeval (final Object val) throws CGException {

    Boolean childResult_2 = child.impl_writeval(val);
    return childResult_2;
  }
// ***** VDMTOOLS END Name=writeval#1|Object


// ***** VDMTOOLS START Name=fwriteval#3|String|Object|Object KEEP=NO
  public Boolean fwriteval (final String filename, final Object val, final Object fdir) throws CGException {

    Boolean childResult_4 = child.impl_fwriteval(filename, val, fdir);
    return childResult_4;
  }
// ***** VDMTOOLS END Name=fwriteval#3|String|Object|Object


// ***** VDMTOOLS START Name=freadval#1|String KEEP=NO
  public Tuple freadval (final String f) throws CGException {

    Tuple childResult_2 = child.impl_freadval(f);
    return childResult_2;
  }
// ***** VDMTOOLS END Name=freadval#1|String


// ***** VDMTOOLS START Name=echo#1|String KEEP=NO
  public Boolean echo (final String text) throws CGException {
    return fecho(new String(""), text, null);
  }
// ***** VDMTOOLS END Name=echo#1|String


// ***** VDMTOOLS START Name=fecho#3|String|String|Object KEEP=NO
  public Boolean fecho (final String filename, final String text, final Object fdir) throws CGException {
    return child.impl_fecho(filename, text, fdir);
  }
// ***** VDMTOOLS END Name=fecho#3|String|String|Object


// ***** VDMTOOLS START Name=ferror KEEP=NO
  public String ferror () throws CGException {
    return child.impl_ferror();
  }
// ***** VDMTOOLS END Name=ferror

}
;
