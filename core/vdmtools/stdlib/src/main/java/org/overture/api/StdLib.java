//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2009-07-27 by the VDM++ to JAVA Code Generator
// (v8.2 - Fri 29-May-2009 09:54:50)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overture.api;

// ***** VDMTOOLS END Name=package// ***** VDMTOOLS START Name=imports KEEP=NO

import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Vector;

import jp.co.csk.vdm.toolbox.VDM.*;



public class StdLib {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp


// ***** VDMTOOLS START Name=vdm_init_StdLib KEEP=NO
  private void vdm_init_StdLib () throws CGException {}
// ***** VDMTOOLS END Name=vdm_init_StdLib


// ***** VDMTOOLS START Name=StdLib KEEP=NO
  public StdLib () throws CGException {
    vdm_init_StdLib();
  }
// ***** VDMTOOLS END Name=StdLib


// ***** VDMTOOLS START Name=ToString#1|Object KEEP=NO
  static public String ToString (final Object s) throws CGException {

    String varRes_2 = null;
    boolean succ_3 = true;
    {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(UTIL.IsInteger(s)))) 
        succ_3 = false;
      if (succ_3) 
        varRes_2 = ToStringInt(s);
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(UTIL.IsInteger(s) && ((Number) s).intValue() >= 0))) 
        succ_3 = false;
      if (succ_3) 
        varRes_2 = ToStringInt(s);
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(UTIL.IsInteger(s) && ((Number) s).intValue() >= 1))) 
        succ_3 = false;
      if (succ_3) 
        varRes_2 = ToStringInt(s);
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean((s instanceof Boolean)))) 
        succ_3 = false;
      if (succ_3) 
        varRes_2 = ToStringBool((Boolean) s);
    }
    if (!succ_3) 
      UTIL.RunTime("Run-Time Error:Can not evaluate an undefined expression");
    return varRes_2;
  }
// ***** VDMTOOLS END Name=ToString#1|Object


// ***** VDMTOOLS START Name=ToStringBool#1|Boolean KEEP=NO
  static public String ToStringBool (final Boolean pval) throws CGException {

    String varRes_2 = null;
    if (pval.booleanValue()) 
      varRes_2 = new String("true");
    else 
      varRes_2 = new String("false");
    return varRes_2;
  }
// ***** VDMTOOLS END Name=ToStringBool#1|Boolean


// ***** VDMTOOLS START Name=ToStringInt#1|Object KEEP=NO
  static public String ToStringInt (final Object val) throws CGException {

    String varRes_2 = null;
    {

      Long result = new Long((int) (UTIL.NumberToLong((Number) val).doubleValue() - new Long(10).doubleValue() * Math.floor(UTIL.NumberToLong((Number) val).doubleValue() / new Long(10).doubleValue())));
      Long vdm_rest = new Long((int) (UTIL.NumberToLong((Number) val).intValue() / new Long(10).intValue()));
      if (new Boolean((vdm_rest.intValue()) > (new Long(0).intValue())).booleanValue()) 
        varRes_2 = ToStringInt(vdm_rest).concat(GetStringFromNum(result));
      else 
        varRes_2 = GetStringFromNum(result);
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=ToStringInt#1|Object


// ***** VDMTOOLS START Name=GetStringFromNum#1|Long KEEP=NO
  static public String GetStringFromNum (final Long val) throws CGException {

    String varRes_2 = null;
    Character e_seq_3 = null;
    if ((1 <= new Long(val.intValue() + new Long(1).intValue()).intValue()) && (new Long(val.intValue() + new Long(1).intValue()).intValue() <= new String("0123456789").length())) 
      e_seq_3 = new Character(new String("0123456789").charAt(new Long(val.intValue() + new Long(1).intValue()).intValue() - 1));
    else 
      UTIL.RunTime("Run-Time Error:Illegal index");
    varRes_2 = new String();
    varRes_2 = varRes_2 + e_seq_3;
    return varRes_2;
  }
// ***** VDMTOOLS END Name=GetStringFromNum#1|Long


// ***** VDMTOOLS START Name=StringToInt#1|String KEEP=YES
  static public Long StringToInt (final String text) throws CGException {

//    Long varRes_2 = null;
//    if (new Boolean(new Long(text.length()).intValue() == new Long(1).intValue()).booleanValue()) 
//      varRes_2 = CharToInt(new Character(text.charAt(0)), new Long(text.length()));
//    else 
//      varRes_2 = new Long(CharToInt(new Character(text.charAt(0)), new Long(text.length())).intValue() + StringToInt(text.substring(1)).intValue());
//    return varRes_2;
	  return Long.parseLong(text);
  }
// ***** VDMTOOLS END Name=StringToInt#1|String


// ***** VDMTOOLS START Name=CharToInt#2|Character|Long KEEP=NO
  static private Long CharToInt (final Character c, final Long pos) throws CGException {

    Long varRes_3 = null;
    {

      HashMap valueMap = new HashMap();
      valueMap = new HashMap();
      valueMap.put(new Character('0'), new Long(0));
      valueMap.put(new Character('1'), new Long(1));
      valueMap.put(new Character('2'), new Long(2));
      valueMap.put(new Character('3'), new Long(3));
      valueMap.put(new Character('4'), new Long(4));
      valueMap.put(new Character('5'), new Long(5));
      valueMap.put(new Character('6'), new Long(6));
      valueMap.put(new Character('7'), new Long(7));
      valueMap.put(new Character('8'), new Long(8));
      valueMap.put(new Character('9'), new Long(9));
      Long var2_29 = null;
      var2_29 = new Long((int) Math.pow(new Long(10).intValue(), new Long(pos.intValue() - new Long(1).intValue()).intValue()));
      varRes_3 = new Long(UTIL.NumberToLong(valueMap.get(c)).intValue() * var2_29.intValue());
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=CharToInt#2|Character|Long


// ***** VDMTOOLS START Name=SetToSeq#1|HashSet KEEP=NO
  static public Vector SetToSeq (final HashSet s) throws CGException {

    Vector varRes_2 = null;
    if (new Boolean(UTIL.equals(s, new HashSet())).booleanValue()) 
      varRes_2 = new Vector();
    else {

      HashSet tmpSet_7 = new HashSet();
      tmpSet_7 = s;
      Object x = null;
      boolean succ_9 = false;
      for (Iterator enm_11 = tmpSet_7.iterator(); enm_11.hasNext() && !succ_9; ) {

        Object tmpElem_10 = (Object) enm_11.next();
        succ_9 = true;
        x = (Object) tmpElem_10;
      }
      if (!succ_9) 
        UTIL.RunTime("Run-Time Error:The binding environment was empty");
      Vector var1_12 = null;
      HashSet par_13 = new HashSet();
      HashSet var2_15 = new HashSet();
      var2_15 = new HashSet();
      var2_15.add(x);
      par_13 = (HashSet) s.clone();
      par_13.removeAll(var2_15);
      var1_12 = (Vector) UTIL.ConvertToList(SetToSeq(par_13));
      Vector var2_17 = null;
      var2_17 = new Vector();
      var2_17.add(x);
      varRes_2 = (Vector) var1_12.clone();
      varRes_2.addAll(var2_17);
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=SetToSeq#1|HashSet


// ***** VDMTOOLS START Name=StringToBool#1|String KEEP=NO
  static public Boolean StringToBool (final String val) throws CGException {
    return new Boolean(UTIL.equals(val, new String("true")));
  }
// ***** VDMTOOLS END Name=StringToBool#1|String


// ***** VDMTOOLS START Name=Split#2|String|Character KEEP=YES
  static public Vector Split (final String text, final Character delimiter) throws CGException {

    Vector varRes_3 = null;
    {

      Vector del_ul = null;
      {

        Vector res_l_6 = new Vector();
        HashSet resBind_s_8 = new HashSet();
        HashSet riseq_12 = new HashSet();
        int max_13 = new Long(text.length()).intValue();
        for (int i_14 = 1; i_14 <= max_13; i_14++) 
          riseq_12.add(new Long(i_14));
        resBind_s_8 = riseq_12;
        Vector bind_l_7 = null;
        bind_l_7 = UTIL.Sort(resBind_s_8);
        Long i = null;
        for (Iterator enm_22 = bind_l_7.iterator(); enm_22.hasNext(); ) {

          Long e_10 = UTIL.NumberToLong(enm_22.next());
          i = e_10;
          Boolean pred_16 = null;
          Character var1_17 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= text.length())) 
            var1_17 = new Character(text.charAt(i.intValue() - 1));
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          pred_16 = new Boolean(UTIL.equals(var1_17, delimiter));
          if (pred_16.booleanValue()) 
            res_l_6.add(i);
        }
        del_ul = res_l_6;
      }
      if (new Boolean(UTIL.equals(del_ul, new Vector())).booleanValue()) {

        varRes_3 = new Vector();
        varRes_3.add(text);
      }
      else {

        Vector var1_27 = null;
        Vector var1_28 = null;
        String e_seq_29 = null;
        Long n2_39 = null;
        Long var1_40 = null;
        if ((1 <= new Long(1).intValue()) && (new Long(1).intValue() <= del_ul.size())) 
          var1_40 = UTIL.NumberToLong(del_ul.get(new Long(1).intValue() - 1));
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        n2_39 = new Long(var1_40.intValue() - new Long(1).intValue());
        int from_33 = (int) Math.max(new Long(1).doubleValue() - 1, 0);
        int to_34 = (int) Math.min(n2_39.doubleValue(), text.length());
        if (from_33 > to_34) 
          e_seq_29 = new String();
        else 
          e_seq_29 = new String(text.substring(from_33, to_34));
        var1_28 = new Vector();
        var1_28.add(e_seq_29);
        Vector var2_44 = null;
        {

          Vector res_l_45 = new Vector();
          HashSet resBind_s_47 = new HashSet();
          HashSet var1_50 = new HashSet();
          HashSet riseq_52 = new HashSet();
          int max_53 = del_ul.size();
          for (int i_54 = 1; i_54 <= max_53; i_54++) 
            riseq_52.add(new Long(i_54));
          var1_50 = riseq_52;
          HashSet var2_55 = new HashSet();
          var2_55 = new HashSet();
          var2_55.add(new Long(del_ul.size()));
          resBind_s_47 = (HashSet) var1_50.clone();
          resBind_s_47.removeAll(var2_55);
          Vector bind_l_46 = null;
          bind_l_46 = UTIL.Sort(resBind_s_47);
          Long i = null;
          for (Iterator enm_80 = bind_l_46.iterator(); enm_80.hasNext(); ) {

            Long e_49 = UTIL.NumberToLong(enm_80.next());
            i = e_49;
            String reselem_58 = null;
            Long n1_67 = null;
            Long var1_68 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= del_ul.size())) 
              var1_68 = UTIL.NumberToLong(del_ul.get(i.intValue() - 1));
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            n1_67 = new Long(var1_68.intValue() + new Long(1).intValue());
            Long n2_72 = null;
            Long var1_73 = null;
            if ((1 <= new Long(i.intValue() + new Long(1).intValue()).intValue()) && (new Long(i.intValue() + new Long(1).intValue()).intValue() <= del_ul.size())) 
              var1_73 = UTIL.NumberToLong(del_ul.get(new Long(i.intValue() + new Long(1).intValue()).intValue() - 1));
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            n2_72 = new Long(var1_73.intValue() - new Long(1).intValue());
            int from_62 = (int) Math.max(n1_67.doubleValue() - 1, 0);
            int to_63 = (int) Math.min(n2_72.doubleValue(), text.length());
            if (from_62 > to_63) 
              reselem_58 = new String();
            else 
              reselem_58 = new String(text.substring(from_62, to_63));
            res_l_45.add(reselem_58);
          }
          var2_44 = res_l_45;
        }
        var1_27 = (Vector) var1_28.clone();
        var1_27.addAll(var2_44);
        Vector var2_81 = null;
        String e_seq_82 = null;
        Long n1_91 = null;
        Long var1_92 = null;
        if ((1 <= new Long(del_ul.size()).intValue()) && (new Long(del_ul.size()).intValue() <= del_ul.size())) 
          var1_92 = UTIL.NumberToLong(del_ul.get(new Long(del_ul.size()).intValue() - 1));
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        n1_91 = new Long(var1_92.intValue() + new Long(1).intValue());
        int from_86 = (int) Math.max(n1_91.doubleValue() - 1, 0);
        int to_87 = (int) Math.min(new Long(text.length()).doubleValue(), text.length());
        if (from_86 > to_87) 
          e_seq_82 = new String();
        else 
          e_seq_82 = new String(text.substring(from_86, to_87));
        var2_81 = new Vector();
        var2_81.add(e_seq_82);
        varRes_3 = (Vector) var1_27.clone();
        varRes_3.addAll(var2_81);
      }
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=Split#2|String|Character

}
;
