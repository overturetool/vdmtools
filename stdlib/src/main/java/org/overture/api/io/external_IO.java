/*
 * #%~
 * The Overture Standard Library for CG code
 * %%
 * Copyright (C) 2008 - 2014 Overture
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #~%
 */
//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2009-07-26 by the VDM++ to JAVA Code Generator
// (v8.2 - Fri 29-May-2009 09:54:50)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overture.api.io;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.*;
// ***** VDMTOOLS END Name=imports





public class external_IO
{

	// ***** VDMTOOLS START Name=parent KEEP=YES
	IO parent = null;

	// static File f = null;
	// static Writer output = null;
	// static Boolean firstLine = true;

	// ***** VDMTOOLS END Name=parent

	// ***** VDMTOOLS START Name=external_IO#1|IO KEEP=NO
	public external_IO(IO parentIO)
	{
		parent = parentIO;
	}

	// ***** VDMTOOLS END Name=external_IO#1|IO

	// ***** VDMTOOLS START Name=external_IO KEEP=NO
	public external_IO()
	{
	}

	// ***** VDMTOOLS END Name=external_IO

	// ***** VDMTOOLS START Name=impl_writeval#1|Object KEEP=NO
	public Boolean impl_writeval(final Object val) throws CGException
	{

		UTIL.RunTime("Run-Time Error:Implicit Function writeval has been called");
		return new Boolean(false);
	}

	// ***** VDMTOOLS END Name=impl_writeval#1|Object

	// ***** VDMTOOLS START Name=impl_fwriteval#3|String|Object|Object KEEP=YES
	public Boolean impl_fwriteval(final String filename, final Object val,
			final Object fdir) throws CGException
	{
		try
		{
			
			FileOutputStream fos =
				new FileOutputStream(filename, fdir.toString().equals("<append>"));

			fos.write(val.toString().getBytes("UTF-8"));
			fos.close();
		}
		catch (IOException e)
		{
		e.printStackTrace();
			return false;
		}

		return new Boolean(true);
	}

	// ***** VDMTOOLS END Name=impl_fwriteval#3|String|Object|Object

	// ***** VDMTOOLS START Name=impl_freadval#1|String KEEP=NO
	public Tuple impl_freadval(final String f) throws CGException
	{

		UTIL.RunTime("Run-Time Error:Implicit Function freadval has been called");
		return new Tuple();
	}

	// ***** VDMTOOLS END Name=impl_freadval#1|String

	// ***** VDMTOOLS START Name=impl_fecho#3|String|String|Object KEEP=YES
	public Boolean impl_fecho(final String filename, final String text,
			final Object fdir) throws CGException
	{
		try
		{
			PrintWriter out = new PrintWriter(new OutputStreamWriter(
					System.out, "UTF8"), true);
			out.println(text);
		} catch (UnsupportedEncodingException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		// System.out.println(text);
		// UTIL.RunTime("Run-Time Error:Preliminary fecho has been called");
		return true;
	}

	// ***** VDMTOOLS END Name=impl_fecho#3|String|String|Object

	// ***** VDMTOOLS START Name=impl_ferror KEEP=NO
	public String impl_ferror() throws CGException
	{

		UTIL.RunTime("Run-Time Error:Preliminary ferror has been called");
		return new String();
	}
	// ***** VDMTOOLS END Name=impl_ferror

};

